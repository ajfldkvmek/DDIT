<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	<configuration scan="true" scanPeriod="30 seconds">
	scan의 기본단위는 1분 이 경우는 30초로 설정
	logback-classic 모듈은 주기적으로 configuration 파일을 읽어 Logback의 설정을 재구성할 수 있습니다. 
	이는 Application이 동작 중일 때 재시작 없이 설정 파일을 수정하고 적용할 수 있는 장점이 있습니다. 
	자동으로 Logback 설정 재구성을 위해 configuration 디렉티브에 scan="true" 속성을 추가합니다. 
	scan의 기본단위는 1분 이 경우는 30초로 설정
	scan주기는 scanPeriod 속성을 이용하여 지정해줄 수 있습니다.	

 -->
<configuration scan="true" scanPeriod="30 seconds">
	<property name="LOGS_PATH" value="D:/logs" />	
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
   			<pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>
	
	<appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 파일경로 설정 -->
		<file>${LOGS_PATH}/logback.log</file>
	
		<!-- Rolling 정책 -->	
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 일자별 로그파일 최대 보관주기(일) -->
			<maxHistory>60</maxHistory>
			<!-- 파일 쓰기가 종료된 log 파일명의 패턴을 지정, (.gz,.zip 등을 넣으면 자동 일자별 로그파일 압축) -->
			<fileNamePattern>${LOGS_PATH}/logback.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 파일당 최고 용량 -->
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		
		<!-- 출력패턴 설정-->
		<encoder>
  			<pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder> 
	</appender>
    
	<appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
		<!-- 에러 로그 필터링 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter"> 
			<level>error</level> 
			<onMatch>ACCEPT</onMatch> 
			<onMismatch>DENY</onMismatch> 
		</filter>
		<!-- 파일경로 설정 -->
		<file>${LOGS_PATH}/error.log</file>
		<!-- Rolling 정책 -->	
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 일자별 로그파일 최대 보관주기(일) -->
			<maxHistory>60</maxHistory>
			<!-- 파일 쓰기가 종료된 log 파일명의 패턴을 지정, (.gz,.zip 등을 넣으면 자동 일자별 로그파일 압축) -->
			<!-- LOGS_PATH는 위에서 자기가 설정한 폴더의 위치(여기선  D:/logs에 저장중 -->
			<fileNamePattern>${LOGS_PATH}/error.%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>	
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 파일당 최고 용량 -->
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>		   	
		</rollingPolicy>
		<!-- 출력패턴 설정-->
		<encoder> 
			<pattern>[%d{yyyy-MM-dd HH:mm:ss}][%thread]==%logger{50}[%L][%M][%l]- %msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder> 	    
	</appender>
	<!-- 
		<logger name="내 프로젝트 패키지 명" level="INFO" additivity="false">
	 -->
    <logger name="kr.or.ddit.logging" level="TRACE" additivity="false">
		<appender-ref ref="ROLLING" />
		<appender-ref ref="STDOUT" />
		<appender-ref ref="Error" />    	
    </logger>
     
    <root level="TRACE">
		<appender-ref ref="ROLLING"/>
		<appender-ref ref="STDOUT" />
		<appender-ref ref="Error" />
    </root>
</configuration>