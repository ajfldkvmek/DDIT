/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2024-04-12 00:50:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.calendar;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class calMain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang='en'>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset='utf-8' />\r\n");
      out.write("<script\r\n");
      out.write("\tsrc='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js'></script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("#infoModal {\r\n");
      out.write("\tposition: fixed;\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("\tbackground-color: rgba(0, 0, 0, 0.3); /* black(0,0,0) ~  white(255,255,255) 마지막 숫자는 불투명도 */\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("\tz-index: 1000;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#cont {\r\n");
      out.write("\tmargin: 50px auto;\r\n");
      out.write("\twidth: 50%;\r\n");
      out.write("\theight: 70%;\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("\t\r\n");
      out.write("\tcolor: black;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"infoModal\">\r\n");
      out.write("\t\t<div id=\"cont\" style=\"text-align: center;\">\r\n");
      out.write("\t\t\t<button onclick=\"fMClose()\" style=\"float: right;\">X</button>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<p>여기서 db에 채용공고에 해당하는 정보를 불러와서 출력</p>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 실제 화면을 담을 영역 -->\r\n");
      out.write("\t<div id=\"Wrapper\">\r\n");
      out.write("\t\t<div id='calendar'></div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//db에서 뽑아낸 데이터 json파일로 가져와서 달력에 넣는 방식\r\n");
      out.write("\t\tvar eventSources = [\r\n");
      out.write("    \t{\r\n");
      out.write("            title: '삼성전자',\r\n");
      out.write("            start: '2024-04-08T00:00', //시간 찍으면 dot로 나옴\r\n");
      out.write("            color: '#CC77FF',\r\n");
      out.write("            extendedProps: {\r\n");
      out.write("            \tname: '이름',\r\n");
      out.write("            \tprocessNumber: 'processNum'\r\n");
      out.write("            }\r\n");
      out.write("          },\r\n");
      out.write("\r\n");
      out.write("          {\r\n");
      out.write("            title: '삼성전자',\r\n");
      out.write("            start: '2024-04-18T00:00', \r\n");
      out.write("            color: '#808080',\r\n");
      out.write("          },    \t{\r\n");
      out.write("              title: '엘지전자',\r\n");
      out.write("              start: '2024-04-08T00:00', \r\n");
      out.write("              color: '#CC77FF',\r\n");
      out.write("            },\r\n");
      out.write("\r\n");
      out.write("            {\r\n");
      out.write("              title: '엘지전자',\r\n");
      out.write("              start: '2024-04-18T00:00',\r\n");
      out.write("              color: '#808080',\r\n");
      out.write("              \r\n");
      out.write("            },\r\n");
      out.write("  \t \t]\r\n");
      out.write("\t\t//infoModal\r\n");
      out.write("        const infoModal = document.querySelector(\"#infoModal\");\r\n");
      out.write("        const mySchStart = document.querySelector(\"#schStart\"); \r\n");
      out.write("        const mySchEnd = document.querySelector(\"#schEnd\");\r\n");
      out.write("        const mySchTitle = document.querySelector(\"#schTitle\");\t\r\n");
      out.write("        const mySchAllday = document.querySelector(\"#allDay\");\t//allday옵션\r\n");
      out.write("        const mySchBColor = document.querySelector(\"#schBColor\"); //배경컬러\r\n");
      out.write("        const mySchFColor = document.querySelector(\"#schFColor\"); //폰트컬러\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        //캘린더 헤더 옵션\r\n");
      out.write("        const headerToolbar = {\r\n");
      out.write("            left: 'prev,next',\r\n");
      out.write("            center: 'title',\r\n");
      out.write("            right: 'today'\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        const calendarEl = document.querySelector('#calendar'); //달력지정\r\n");
      out.write("\r\n");
      out.write("        const calendarOption = {\r\n");
      out.write("        \teventLimit : 999,\r\n");
      out.write("            contentHeight: 'auto',\r\n");
      out.write("           \r\n");
      out.write("            expandRows: true, // 화면에 맞게 높이 재설정\r\n");
      out.write("//             slotMinTime: '09:00', // Day 캘린더 시작 시간\r\n");
      out.write("//             slotMaxTime: '18:00', // Day 캘린더 종료 시간\r\n");
      out.write("          \r\n");
      out.write("\t\t\t// 맨 위 헤더 지정\r\n");
      out.write("            headerToolbar: headerToolbar,\r\n");
      out.write("            // default: dayGridMonth 'dayGridWeek', 'timeGridDay', 'listWeek'\r\n");
      out.write("            initialView: 'dayGridMonth',  \r\n");
      out.write("            locale: 'kr',        // 언어 설정\r\n");
      out.write("            selectable: true,    // 영역 선택\r\n");
      out.write("            //selectMirror: true,  // 오직 TimeGrid view에만 적용됨, default false\r\n");
      out.write("            //navLinks 날짜,WeekNumber 클릭 여부, default false\r\n");
      out.write("            //weekNumbers: WeekNumber 출력여부(1월1일 기준 n번쨰 주), default false\r\n");
      out.write("            editable: false,      // event(일정) \r\n");
      out.write("            /* 시작일 및 기간 수정가능여부\r\n");
      out.write("            eventStartEditable: false,\r\n");
      out.write("            eventDurationEditable: true,\r\n");
      out.write("            */\r\n");
      out.write("           \r\n");
      out.write("            // contentHeight: 500,\r\n");
      out.write("            //dayMaxEventRows: true,  // Row 높이보다 많으면 +숫자 more 링크 보임!\r\n");
      out.write("            /*\r\n");
      out.write("            views: {\r\n");
      out.write("                dayGridMonth: {\r\n");
      out.write("                    dayMaxEventRows: 3\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            */\r\n");
      out.write("            nowIndicator: true,\r\n");
      out.write("            events: eventSources\r\n");
      out.write("           \r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 캘린더 생성\r\n");
      out.write("        const calendar = new FullCalendar.Calendar(calendarEl, calendarOption);\r\n");
      out.write("       \r\n");
      out.write("        calendar.render();\r\n");
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        // 캘린더 이벤트 등록\r\n");
      out.write("        calendar.on(\"eventAdd\", info => alert(\"일정추가완료\"));\r\n");
      out.write("        calendar.on(\"eventClick\", info => {\r\n");
      out.write("            //alert(info.event.extendedProps.processNumber);\r\n");
      out.write("            //여기서 위 처럼 프로세스 번호 가져와서\r\n");
      out.write("            //모달창으로 해당 프로세스 정보 띄우기\r\n");
      out.write("        \tinfoModal.style.display = \"block\";\r\n");
      out.write("        });\r\n");
      out.write("        calendar.on(\"eventMouseEnter\", info => console.log(\"eEnter:\", info));\r\n");
      out.write("        calendar.on(\"eventMouseLeave\", info => console.log(\"eLeave:\", info));\r\n");
      out.write("        calendar.on(\"dateClick\", info => console.log(\"dateClick:\", info));\r\n");
      out.write("//         calendar.on(\"select\", info => {\r\n");
      out.write("//             console.log(\"체킁:\", info);\r\n");
      out.write("\r\n");
      out.write("//             mySchStart.value = info.startStr;\r\n");
      out.write("//             mySchEnd.value = info.endStr;\r\n");
      out.write("\r\n");
      out.write("//             infoModal.style.display = \"block\";\r\n");
      out.write("//         });\r\n");
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("        // 일정(이벤트) 추가하깅\r\n");
      out.write("        function fCalAdd() {\r\n");
      out.write("            if (!mySchTitle.value) {\r\n");
      out.write("                alert(\"제모게 머라도 써주삼\")\r\n");
      out.write("                mySchTitle.focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            let bColor = mySchBColor.value;\r\n");
      out.write("            let fColor = mySchFColor.value;\r\n");
      out.write("            if (fColor == bColor) {\r\n");
      out.write("                bColor = \"black\";\r\n");
      out.write("                fColor = \"yellow\";\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            let event = {\r\n");
      out.write("                start: mySchStart.value,\r\n");
      out.write("                end: mySchEnd.value,\r\n");
      out.write("                title: mySchTitle.value,\r\n");
      out.write("                allDay: mySchAllday.checked,\r\n");
      out.write("                backgroundColor: bColor,\r\n");
      out.write("                textColor: fColor\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            calendar.addEvent(event);\r\n");
      out.write("            fMClose();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 모달 닫기\r\n");
      out.write("        function fMClose() {\r\n");
      out.write("        \tinfoModal.style.display = \"none\";\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
