/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2024-04-11 01:15:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.calendar;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test01_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset='utf-8' />\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("<script src='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/calendar/dist/index.global.js'></script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("  body {\r\n");
      out.write("    margin: 40px 10px;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  #calendar {\r\n");
      out.write("    max-width: 1100px;\r\n");
      out.write("    margin: 0 auto;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  #yrModal {\r\n");
      out.write("    position: fixed;\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    height: 100%;\r\n");
      out.write("    background-color: rgba(50, 150, 150, 0.7);\r\n");
      out.write("    display: none;\r\n");
      out.write("    z-index: 1000;\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("  #cont {\r\n");
      out.write("    margin: 50px auto;\r\n");
      out.write("    width: 50%;\r\n");
      out.write("    height: 70%;\r\n");
      out.write("    background-color: darkblue;\r\n");
      out.write("    color: yellow;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t\r\n");
      out.write("\t<div id=\"yrModal\">\r\n");
      out.write("        <div id=\"cont\" style=\"text-align: center;\">\r\n");
      out.write("            <br>\r\n");
      out.write("            <h1>예린 모달 모달</h1>\r\n");
      out.write("\t\t            시작일 <input type=\"text\" id=\"schStart\" value=\"\"><br>\r\n");
      out.write("\t\t            종료일 <input type=\"text\" id=\"schEnd\" value=\"\"><br>\r\n");
      out.write("\t\t            제목 <input type=\"text\" id=\"schTitle\" value=\"\"><br>\r\n");
      out.write("\t\t            하루종일 <input type=\"checkbox\" id=\"allDay\"><br>\r\n");
      out.write("\t\t            배경색<input type=\"color\" id=\"schBColor\" value=\"\">\r\n");
      out.write("\t\t            글자색<input type=\"color\" id=\"schFColor\" value=\"\">\r\n");
      out.write("            <button onclick=\"fCalAdd()\">추강</button><br>\r\n");
      out.write("            <button onclick=\"fMClose()\">X</button>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\t\r\n");
      out.write(" \t<div id='calendar'></div>\r\n");
      out.write("  \t\r\n");
      out.write("  \t<script>\r\n");
      out.write("\r\n");
      out.write("// \tconst YrModal = document.querySelector(\"#yrModal\");\r\n");
      out.write("// \tconst calendarEl = document.querySelector('#calendar');\r\n");
      out.write("// \tconst mySchStart = document.querySelector(\"#schStart\");\r\n");
      out.write("// \tconst mySchEnd = document.querySelector(\"#schEnd\");\r\n");
      out.write("// \tconst mySchTitle = document.querySelector(\"#schTitle\");\r\n");
      out.write("// \tconst mySchAllday = document.querySelector(\"#allDay\");\r\n");
      out.write("// \tconst mySchBColor = document.querySelector(\"#schBColor\");\r\n");
      out.write("// \tconst mySchFColor = document.querySelector(\"#schFColor\");\r\n");
      out.write("\t//https://fullcalendar.io/docs\r\n");
      out.write("\t// ① title : 해당 이벤트의 제목을 나타낸다.\r\n");
      out.write("\t// ② color : 이벤트의 색상을 변경한다.\r\n");
      out.write("\t// ③ textColor : 이벤트 내용의 텍스트의 색상을 변경한다.\r\n");
      out.write("\t// ④ backgroundColor : 이벤트 배경색의 색상만을 변경한다.\r\n");
      out.write("\t// ⑤ borderColor : 이벤트 테두리의 색상만을 변경한다.\r\n");
      out.write("\t// ⑥ rendering : \"bakground\"라고 입력하면 color, backgroundColor의 색상으로 해당일 전체의 내용이 채워진다.\r\n");
      out.write("\t//현재 날짜 계산 >> 이거 자바단에서 처리하자\r\n");
      out.write("\tvar today = new Date();\r\n");
      out.write("\tvar year = today.getFullYear();\r\n");
      out.write("\tvar month = ('0' + (today.getMonth() + 1)).slice(-2);\r\n");
      out.write("\tvar day = ('0' + today.getDate()).slice(-2);\r\n");
      out.write("\tvar dateString = year + '-' + month  + '-' + day;\r\n");
      out.write("\r\n");
      out.write("    document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("    var calendarEl = document.getElementById('calendar');\r\n");
      out.write("\r\n");
      out.write("    var calendar = new FullCalendar.Calendar(calendarEl, {\r\n");
      out.write("    \t\r\n");
      out.write("      local : 'kr',\r\n");
      out.write("//       timeZone: 'Asia/Korea',\r\n");
      out.write("      headerToolbar: {\r\n");
      out.write("//         left: 'prev,next today',\r\n");
      out.write("        center: 'title',\r\n");
      out.write("//         right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n");
      out.write("// \t\tright: 'dayGridMonth'\r\n");
      out.write("      },\r\n");
      out.write("      initialDate: dateString, //현재날짜 가져오기\r\n");
      out.write("      navLinks: true, // can click day/week names to navigate views\r\n");
      out.write("      selectable: true,\r\n");
      out.write("\r\n");
      out.write("         \r\n");
      out.write("      select: function (arg) { // 캘린더에서 이벤트를 생성할 수 있다.\r\n");
      out.write("    \t  \r\n");
      out.write("          var title = prompt('일정을 입력해주세요.');\r\n");
      out.write("          if (title) {\r\n");
      out.write("              calendar.addEvent({\r\n");
      out.write("                  title: title,\r\n");
      out.write("                  start: arg.start,\r\n");
      out.write("                  end: arg.end,\r\n");
      out.write("                  allDay: arg.allDay,\r\n");
      out.write("              })\r\n");
      out.write("          }\r\n");
      out.write("\r\n");
      out.write("          var allEvent = calendar.getEvents(); // .getEvents() 함수로 모든 이벤트를 Array 형식으로 가져온다. (FullCalendar 기능 참조)\r\n");
      out.write("\r\n");
      out.write("          var events = new Array(); // Json 데이터를 받기 위한 배열 선언\r\n");
      out.write("          for (var i = 0; i < allEvent.length; i++) {\r\n");
      out.write("              var obj = new Object();     // Json 을 담기 위해 Object 선언\r\n");
      out.write("              // alert(allEvent[i]._def.title); // 이벤트 명칭 알람\r\n");
      out.write("              obj.title = allEvent[i]._def.title; // 이벤트 명칭  ConsoleLog 로 확인 가능.\r\n");
      out.write("              obj.start = allEvent[i]._instance.range.start; // 시작\r\n");
      out.write("              obj.end = allEvent[i]._instance.range.end; // 끝\r\n");
      out.write("\r\n");
      out.write("              events.push(obj);\r\n");
      out.write("          }\r\n");
      out.write("          var jsondata = JSON.stringify(events);\r\n");
      out.write("          console.log(jsondata);\r\n");
      out.write("          // saveData(jsondata);\r\n");
      out.write("\r\n");
      out.write("          $(function saveData(jsondata) {\r\n");
      out.write("              $.ajax({\r\n");
      out.write("                  url: \"/full-calendar/calendar-admin-update\",\r\n");
      out.write("                  method: \"POST\",\r\n");
      out.write("                  dataType: \"json\",\r\n");
      out.write("                  data: JSON.stringify(events),\r\n");
      out.write("                  contentType: 'application/json',\r\n");
      out.write("              })\r\n");
      out.write("                  .done(function (result) {\r\n");
      out.write("                      // alert(result);\r\n");
      out.write("                  })\r\n");
      out.write("                  .fail(function (request, status, error) {\r\n");
      out.write("                       // alert(\"에러 발생\" + error);\r\n");
      out.write("                  });\r\n");
      out.write("              calendar.unselect()\r\n");
      out.write("          });\r\n");
      out.write("      },\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      eventClick: function(arg) {\r\n");
      out.write("    \t  //클릭이벤트 여기 클릭시 채용정보창 띄우기\r\n");
      out.write("    \t  alert(\"aasddsaasdasd\");\r\n");
      out.write("      },\r\n");
      out.write("      editable: true,\r\n");
      out.write("      dayMaxEvents: true, // allow \"more\" link when too many events\r\n");
      out.write("      events: [\r\n");
      out.write("        {\r\n");
      out.write("          title: '이거 시작',\r\n");
      out.write("          start: '2024-04-08T00:00', //시간 찍으면 dot로 나옴\r\n");
      out.write("          //end: '2024-04-09T00:00',\r\n");
      out.write("          color: '#CC77FF', \r\n");
      out.write("        },\r\n");
      out.write("\r\n");
      out.write("        {\r\n");
      out.write("          title: '이거 끝',\r\n");
      out.write("          start: '2024-04-18T00:00', //시간 찍으면 dot로 나옴\r\n");
      out.write("//           end: '2024-04-21T00:00',\r\n");
      out.write("          color: '#808080',\r\n");
      out.write("        },\r\n");
      out.write("\r\n");
      out.write("      ]\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    calendar.render();\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
