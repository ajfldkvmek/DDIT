/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2024-04-11 01:21:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.calendar;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang='en'>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset='utf-8' />\r\n");
      out.write("    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js'></script>\r\n");
      out.write("\r\n");
      out.write("    <style>\r\n");
      out.write("        #calendar {\r\n");
      out.write("            width: 80vw;\r\n");
      out.write("            height: 80vh;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #yrModal {\r\n");
      out.write("            position: fixed;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            background-color: rgba(50, 150, 150, 0.7);\r\n");
      out.write("            display: none;\r\n");
      out.write("            z-index: 1000;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #cont {\r\n");
      out.write("            margin: 50px auto;\r\n");
      out.write("            width: 50%;\r\n");
      out.write("            height: 70%;\r\n");
      out.write("            background-color: darkblue;\r\n");
      out.write("            color: yellow;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <!-- 모달은 메인 영역 밖으로 빼어 놓는게 좋음-->\r\n");
      out.write("    <div id=\"yrModal\">\r\n");
      out.write("        <div id=\"cont\" style=\"text-align: center;\">\r\n");
      out.write("            <br>\r\n");
      out.write("            <h1>예린 모달 모달</h1>\r\n");
      out.write("            시작일 <input type=\"text\" id=\"schStart\" value=\"\"><br>\r\n");
      out.write("            종료일 <input type=\"text\" id=\"schEnd\" value=\"\"><br>\r\n");
      out.write("            제목 <input type=\"text\" id=\"schTitle\" value=\"\"><br>\r\n");
      out.write("            하루종일 <input type=\"checkbox\" id=\"allDay\"><br>\r\n");
      out.write("            배경색<input type=\"color\" id=\"schBColor\" value=\"\">\r\n");
      out.write("            글자색<input type=\"color\" id=\"schFColor\" value=\"\">\r\n");
      out.write("            <button onclick=\"fCalAdd()\">추강</button><br>\r\n");
      out.write("            <button onclick=\"fMClose()\">X</button>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <!-- 실제 화면을 담을 영역 -->\r\n");
      out.write("    <div id=\"Wrapper\">\r\n");
      out.write("        <div id='calendar'></div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <script>\r\n");
      out.write("        const YrModal = document.querySelector(\"#yrModal\");\r\n");
      out.write("        const calendarEl = document.querySelector('#calendar');\r\n");
      out.write("        const mySchStart = document.querySelector(\"#schStart\");\r\n");
      out.write("        const mySchEnd = document.querySelector(\"#schEnd\");\r\n");
      out.write("        const mySchTitle = document.querySelector(\"#schTitle\");\r\n");
      out.write("        const mySchAllday = document.querySelector(\"#allDay\");\r\n");
      out.write("        const mySchBColor = document.querySelector(\"#schBColor\");\r\n");
      out.write("        const mySchFColor = document.querySelector(\"#schFColor\");\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        //캘린더 헤더 옵션\r\n");
      out.write("        const headerToolbar = {\r\n");
      out.write("            left: 'prevYear,prev,next,nextYear today',\r\n");
      out.write("            center: 'title',\r\n");
      out.write("            right: 'dayGridMonth,dayGridWeek,timeGridDay'\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 캘린더 생성 옵션(참공)\r\n");
      out.write("        const calendarOption = {\r\n");
      out.write("            height: '700px', // calendar 높이 설정\r\n");
      out.write("            expandRows: true, // 화면에 맞게 높이 재설정\r\n");
      out.write("            slotMinTime: '09:00', // Day 캘린더 시작 시간\r\n");
      out.write("            slotMaxTime: '18:00', // Day 캘린더 종료 시간\r\n");
      out.write("            // 맨 위 헤더 지정\r\n");
      out.write("            headerToolbar: headerToolbar,\r\n");
      out.write("            initialView: 'dayGridMonth',  // default: dayGridMonth 'dayGridWeek', 'timeGridDay', 'listWeek'\r\n");
      out.write("            locale: 'kr',        // 언어 설정\r\n");
      out.write("            selectable: true,    // 영역 선택\r\n");
      out.write("            selectMirror: true,  // 오직 TimeGrid view에만 적용됨, default false\r\n");
      out.write("            navLinks: true,      // 날짜,WeekNumber 클릭 여부, default false\r\n");
      out.write("            weekNumbers: true,   // WeekNumber 출력여부, default false\r\n");
      out.write("            editable: true,      // event(일정) \r\n");
      out.write("            /* 시작일 및 기간 수정가능여부\r\n");
      out.write("            eventStartEditable: false,\r\n");
      out.write("            eventDurationEditable: true,\r\n");
      out.write("            */\r\n");
      out.write("            dayMaxEventRows: true,  // Row 높이보다 많으면 +숫자 more 링크 보임!\r\n");
      out.write("            /*\r\n");
      out.write("            views: {\r\n");
      out.write("                dayGridMonth: {\r\n");
      out.write("                    dayMaxEventRows: 3\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            */\r\n");
      out.write("            nowIndicator: true,\r\n");
      out.write("            //events:[],\r\n");
      out.write("            eventSources: [\r\n");
      out.write("                './commonEvents.json',  // Ajax 요청 URL임에 유의!\r\n");
      out.write("                './KYREvents.json',\r\n");
      out.write("                './SYREvents.json'\r\n");
      out.write("            ]\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 캘린더 생성\r\n");
      out.write("        const calendar = new FullCalendar.Calendar(calendarEl, calendarOption);\r\n");
      out.write("        // 캘린더 그리깅\r\n");
      out.write("        calendar.render();\r\n");
      out.write("\r\n");
      out.write("        // 캘린더 이벤트 등록\r\n");
      out.write("        calendar.on(\"eventAdd\", info => console.log(\"Add:\", info));\r\n");
      out.write("        calendar.on(\"eventChange\", info => console.log(\"Change:\", info));\r\n");
      out.write("        calendar.on(\"eventRemove\", info => console.log(\"Remove:\", info));\r\n");
      out.write("        calendar.on(\"eventClick\", info => {\r\n");
      out.write("            console.log(\"eClick:\", info);\r\n");
      out.write("            console.log('Event: ', info.event.extendedProps);\r\n");
      out.write("            console.log('Coordinates: ', info.jsEvent);\r\n");
      out.write("            console.log('View: ', info.view);\r\n");
      out.write("            // 재미로 그냥 보더색 바꾸깅\r\n");
      out.write("            info.el.style.borderColor = 'red';\r\n");
      out.write("        });\r\n");
      out.write("        calendar.on(\"eventMouseEnter\", info => console.log(\"eEnter:\", info));\r\n");
      out.write("        calendar.on(\"eventMouseLeave\", info => console.log(\"eLeave:\", info));\r\n");
      out.write("        calendar.on(\"dateClick\", info => console.log(\"dateClick:\", info));\r\n");
      out.write("        calendar.on(\"select\", info => {\r\n");
      out.write("            console.log(\"체킁:\", info);\r\n");
      out.write("\r\n");
      out.write("            mySchStart.value = info.startStr;\r\n");
      out.write("            mySchEnd.value = info.endStr;\r\n");
      out.write("\r\n");
      out.write("            YrModal.style.display = \"block\";\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 일정(이벤트) 추가하깅\r\n");
      out.write("        function fCalAdd() {\r\n");
      out.write("            if (!mySchTitle.value) {\r\n");
      out.write("                alert(\"제모게 머라도 써주삼\")\r\n");
      out.write("                mySchTitle.focus();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            let bColor = mySchBColor.value;\r\n");
      out.write("            let fColor = mySchFColor.value;\r\n");
      out.write("            if (fColor == bColor) {\r\n");
      out.write("                bColor = \"black\";\r\n");
      out.write("                fColor = \"yellow\";\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            let event = {\r\n");
      out.write("                start: mySchStart.value,\r\n");
      out.write("                end: mySchEnd.value,\r\n");
      out.write("                title: mySchTitle.value,\r\n");
      out.write("                allDay: mySchAllday.checked,\r\n");
      out.write("                backgroundColor: bColor,\r\n");
      out.write("                textColor: fColor\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            calendar.addEvent(event);\r\n");
      out.write("            fMClose();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 모달 닫기\r\n");
      out.write("        function fMClose() {\r\n");
      out.write("            YrModal.style.display = \"none\";\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
