<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<!-- 
		# log4j 정의
		- 다양한 서버상의 정보들을 출력하고 다양한 대상으로 출력을 도와주는 도구
		
		# log4j level설정
		
		off		: 로깅해제 - 사용하지 않음
		
		fatal	: 심각한 오류 - 아주 심각한 에러 발생, 시스템적으로 심각한 문제가 발생하여 어플리케이션 작동이 불가능한 경우(일반적으로 사용할 일 없음)
		
		warn	: 경고 - 처리 가능한 문제이지만 향후 시스템 에러의 원인이 될 수 있는 경고성 메세지
		
		info	: 강조 정보 - 로그인, 상태변경과 같은 정보성 메세지
		
		debug 	: 디버깅 - 개발시 디버그 용도로 사용한 메세지를 나타낸다
		
		trace	: log4j 1.2.12에서 신규추가된 레벨 debug레벨이 너무 광범위한 것을 해결하기 위해서 상세한 상태를 나타냄
		
		f > w > i > d > t 순
		
		# log4j  pattern option
		# log4j 1.2.17 api document를 기준으로 설명(우리는 1.2.15)
		
		%p: debug, info, warn 등 priority 출력
		%m: 로그 내용 출력
		%c: 로깅 이벤트의 카테고리를 출력
		%C: 로깅 이벤트가 발생한 클래스 이름을 출력
		%d: 로깅 이벤트가 발생한 시간을 출력
		%t: 로그 이벤트가 발생한 쓰레드의 이름을 출력
		%F: 로깅이 발생한 프로그램 파일명 출력
		%L: 깅이 발생한 라인 번호를 출력
		%M: 로깅이 발생한 method 이름 출력
		%:  %표시 줍력
		%n: 플랫폼 종속적인 개행문자 출력
		
	 -->
	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<logger name="kr.or.ddit">
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<root>
		<priority value="debug" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>
