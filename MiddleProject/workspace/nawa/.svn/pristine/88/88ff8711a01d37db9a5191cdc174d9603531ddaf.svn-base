package board.dao;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.exceptions.PersistenceException;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.session.SqlSession;

import board.vo.PostVO;
import util.MyBatisUtil;

public class PostDaoImpl implements IPostDao {
	
	private static IPostDao postDao;
	
	private PostDaoImpl() {
		
	}
	
	public static IPostDao getInstance() {
		if(postDao == null) {
			postDao = new PostDaoImpl();
		}
		return postDao;
	}
	
	
	

	public int insertPost(PostVO pv) {

		SqlSession sqlSession = MyBatisUtil.getInstance();
		
		int cnt = 0;
		
		try {

			cnt = sqlSession.insert("board.insertPost", pv);

			if( cnt > 0 ) {
				sqlSession.commit();
			}
		} catch (PersistenceException ex) {
//			sqlSession.rollback();
			ex.printStackTrace();
		} finally {
			sqlSession.close();
		}
		return cnt;
	}

	
	
	public int updatePost(PostVO pv) {

		SqlSession sqlSession = MyBatisUtil.getInstance();
		
		int cnt = 0;
		
		try {
			cnt = sqlSession.update("board.updatePost", pv);
			
			if( cnt > 0 ) {
				sqlSession.commit();
			}
			
		}catch(PersistenceException ex) {
			sqlSession.rollback();
			ex.printStackTrace();
		}finally {
			sqlSession.close();
		}
		return cnt;
	}
	
	
	
	
	public int deletePost(int postNo) {

		SqlSession sqlSession = MyBatisUtil.getInstance();

		int cnt = 0;
		
		try {

//			cnt = sqlSession.delete("post.deletePost", postNo);
			cnt = sqlSession.update("board.deletePost", postNo);
			 
		 	if( cnt > 0 ) {
				sqlSession.commit();
			}

		} catch (PersistenceException ex) {
			sqlSession.rollback();
			ex.printStackTrace();
		} finally {
			sqlSession.close();
		}
		return cnt;
	}
	
	
	
//	private void selectAll() {
	public List<PostVO> selectAll() {
		
		List<PostVO> postList = new ArrayList<PostVO>();
		
		SqlSession sqlSession = MyBatisUtil.getInstance();

		try {

			postList = sqlSession.selectList("board.selectAll");

		} catch (PersistenceException ex) {
			ex.printStackTrace();
		} finally {
			sqlSession.close(); 
		}
		return postList;
	}
	

//	public List<PostVO> searchPost(List<PostVO> searchList) {
	public List<PostVO> searchPost(String searchField, String searchText) {
//		public List<PostVO> searchPost(PostVO pv) {
			
		List<PostVO> searchList = new ArrayList<PostVO>();
		
		SqlSession sqlSession = MyBatisUtil.getInstance(true);
		
//		System.out.println("다오에서 확인하는 searchField: " + searchField + " | " + "searchText: " + searchText);

		try {
			
			Map<String, String> paramMap = new HashMap<String, String>();
			paramMap.put("searchField", searchField);
			paramMap.put("searchText", searchText);
			
			searchList = sqlSession.selectList("board.searchPost", paramMap);
//			System.out.println("Dao까지 무사히 왔나요?" + searchList);
		} catch (PersistenceException ex) {
			ex.printStackTrace();
		} finally {
			sqlSession.close(); 
		}
		return searchList;
	}
	
	
	public boolean checkPostNo(int postNo) {

		boolean Exists = false;
		int cnt = 0;
		SqlSession sqlSession = MyBatisUtil.getInstance(true);

		try {

			cnt = sqlSession.selectOne("board.checkPost", postNo);
		 	
			if(cnt > 0) {
				Exists = true;
			}
		} catch (PersistenceException ex) {
			ex.printStackTrace();
		} finally {
			sqlSession.close(); 
		}

		return Exists;
	}

	@Override
	public PostVO getPost(int postNo) {
		SqlSession sqlSession = MyBatisUtil.getInstance(true);
		PostVO pv = null;
	try {
		
		pv = sqlSession.selectOne("board.getPost", postNo);
		System.out.println("commDao getPost의 postNo: " + postNo);
	}catch(PersistenceException ex) {
		ex.printStackTrace();
	}finally {
		sqlSession.close();
	}
	
	return pv;
	}

	@Override
	public void updateViewCnt(int postNo) {
	    SqlSession sqlSession = MyBatisUtil.getInstance();
	    try {
	        sqlSession.update("board.updateViewCnt", postNo);
	        sqlSession.commit();
	    } catch (PersistenceException ex) {
	        ex.printStackTrace();
	        sqlSession.rollback();
	    } finally {
	        sqlSession.close();
	    }
	}
	
	//게시물 목록 가져오기
	public List<PostVO> getPostListWithPaging(int startIdx, int countPerPage) {
	    SqlSession sqlSession = MyBatisUtil.getInstance();
	    List<PostVO> postList = null;

	    try {
	        sqlSession = MyBatisUtil.getInstance();
	        RowBounds rowBounds = new RowBounds(startIdx, countPerPage);
	        postList = sqlSession.selectList("board.pagingList", null, rowBounds);
	    } finally {
	        if (sqlSession != null) {
	            sqlSession.close();
	        }
	    }
	    return postList;
	}

	//총 게시물 수
	@Override
	public int totalPostCount() {
		SqlSession sqlSession = MyBatisUtil.getInstance();
        int totalCount = 0;

        try {
            totalCount = sqlSession.selectOne("board.totalPostCount");
        } catch (PersistenceException ex) {
            ex.printStackTrace();
        } finally {
            sqlSession.close();
        }

        return totalCount;
	}
	
	//검색결과 목록 가져오기
	@Override
    public List<PostVO> searchPostWithPaging(String searchField, String searchText, int start, int countPerPage) {
		SqlSession sqlSession = MyBatisUtil.getInstance();

		List <PostVO> pagingSearchList = new ArrayList();
		
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("searchField", searchField);
		params.put("searchText", searchText);
		params.put("start", start);
		params.put("countPerPage", countPerPage);
//		System.out.println("dao (4) searchField: " + searchField + " | searchText: " + searchText + " | start: "  + start + " | countPerPage: "  + countPerPage);

		pagingSearchList = sqlSession.selectList("board.searchPostWithPaging", params);
//		System.out.println("dao list: " + pagingSearchList);
		return sqlSession.selectList("board.searchPostWithPaging", params);

    }

	//검색결과 총 게시물 수
    @Override
    public int getTotalSearchCount(String searchField, String searchText) {
		SqlSession sqlSession = MyBatisUtil.getInstance();
		int TotalSearchCount = 0;
		
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("searchField", searchField);
		params.put("searchText", searchText);
//		System.out.println("dao params에 넣을 값: " + searchField + " | " + searchText);
		
        try {
        	TotalSearchCount = sqlSession.selectOne("board.getTotalSearchCount", params);
        } catch (PersistenceException ex) {
            ex.printStackTrace();
        } finally {
            sqlSession.close();
        }
        System.out.println("dao TotalSearchCount: " + TotalSearchCount);
        return TotalSearchCount;
    }
}
